<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ac.bcc.mapper.business.DeviceMapper">
  <resultMap id="BaseResultMap" type="cn.ac.bcc.model.business.Device">
    <!--
      WARNING - @mbggenerated
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="serial_number" jdbcType="VARCHAR" property="serialNumber" />
    <result column="private_key" jdbcType="VARCHAR" property="privateKey" />
    <result column="register_time" jdbcType="TIMESTAMP" property="registerTime" />
    <result column="register_account" jdbcType="INTEGER" property="registerAccount" />
    <result column="bind_account" jdbcType="INTEGER" property="bindAccount" />
    <result column="bind_phone" jdbcType="VARCHAR" property="bindPhone" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="area_id" jdbcType="INTEGER" property="areaId" />
    <result column="debug_account" jdbcType="INTEGER" property="debugAccount" />
    <result column="work_frequency" jdbcType="VARCHAR" property="workFrequency" />
    <result column="program_ids" jdbcType="VARCHAR" property="programIds" />
    <result column="on_off_line" jdbcType="INTEGER" property="onOffLine" />
    <result column="track_no" jdbcType="VARCHAR" property="trackNo" />
    <result column="ex_status" jdbcType="INTEGER" property="exStatus" />
  </resultMap>

    <select id="searchDeviceList" resultType="cn.ac.bcc.model.business.Device">
         select d.id id, d.serial_number serialNumber, d.private_key privateKey, d.register_time registerTime,
        d.register_account registerAccount, d.bind_account bindAccount, d.bind_phone bindPhone, d.`status` status,
        d.area_id areaId, d.debug_account debugAccount,d.on_off_line onOffLine, d.track_no trackNo, d.ex_status exStatus, u.userName registerName from bcc_device d left join bcc_user u
        on d.register_account=u.id ,
        (select t.id id, t.area_name areaName, t1.area_name city, t2.area_name province from bcc_area t ,
          (select * from bcc_area t where t.`level` = 2 ) t1,
          (select * from bcc_area t where t.`level` = 1 ) t2
          where t.`level`=3 and  t.parent_id = t1.id and t1.parent_id = t2.id) a
        where  1= 1 and d.area_id = a.id
    </select>

    <select id="selectDebugDevice" parameterType="cn.ac.bcc.model.business.Device" resultType="cn.ac.bcc.model.business.Device">
        select d.id id, d.serial_number serialNumber, d.private_key privateKey, d.register_time registerTime,
        d.register_account registerAccount, d.bind_account bindAccount, d.bind_phone bindPhone, d.`status` status,
        d.area_id areaId, d.debug_account debugAccount,d.on_off_line onOffLine, d.track_no trackNo, d.ex_status exStatus, u.userName registerName from bcc_device d left join bcc_user u
        on d.register_account=u.id WHERE 1=1
        <if test="device.id != null">
            and d.id = #{device.id}
        </if>
        <if test="device.serialNumber != null and device.serialNumber != ''">
            and d.serial_number = #{device.serialNumber}
        </if>
        <if test="device.registerAccount != null">
            and d.register_account = #{device.registerAccount}
        </if>
        <if test="device.debugAccount != null">
            and d.debug_account = #{device.debugAccount}
        </if>
        <if test="device.status != null">
            and d.status = #{device.status}
        </if>
        ORDER BY on_off_line desc
    </select>

    <select id="selectSettingDevice" resultType="cn.ac.bcc.model.business.Device">
        select d.id id, d.serial_number serialNumber, d.private_key privateKey, d.register_time registerTime,
        d.register_account registerAccount, d.bind_account bindAccount, d.bind_phone bindPhone, d.`status` status,
        d.area_id areaId, d.debug_account debugAccount, d.on_off_line onOffLine, d.track_no trackNo, d.ex_status exStatus, u.userName registerName from bcc_device d left join bcc_user u
        on d.register_account=u.id WHERE 1=1
        <if test="device.id != null">
            and d.id = #{device.id}
        </if>
        <if test="device.serialNumber != null and device.serialNumber != ''">
            and d.serial_number = #{device.serialNumber}
        </if>
        ORDER BY id desc
    </select>
    <update id="updateStatusByNum">
        update BCC_DEVICE d SET d.STATUS = #{status}, d.area_id = #{areaId}, d.work_frequency=#{workFrequency}, d.program_ids=#{programIds}
        where d.serial_number = #{serialNumber}
    </update>

    <update id="updateOnOffLineByNum">
        update BCC_DEVICE d SET d.on_off_line = #{onOffLine}
        where d.serial_number = #{serialNumber}
    </update>

    <update id="updateWorkFrequencyAndProgramIds">
        update BCC_DEVICE d SET d.work_frequency = #{frequency} , d.program_ids = #{programIds}
        where d.serial_number = #{serialNumber}
    </update>


</mapper>